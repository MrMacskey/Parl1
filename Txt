#include <iostream>
#include <omp.h>
using namespace std;
void shaker_sort(int arr[], int n) {
	int left = 0;
	int right = n - 1;
	int flag = 1;
	while (left < right && flag > 0) {
		flag = 0;
#pragma omp parallel for shared(arr, flag, left, right)
		for (int i = left; i < right; i++) {
			if (arr[i] > arr[i + 1]) {
				int temp = arr[i];
				arr[i] = arr[i + 1];
				arr[i + 1] = temp;
				flag = 1;
			}
		}
		right--;

#pragma omp parallel for shared(arr, flag, left, right)
		for (int i = right; i > left; i--) {
			if (arr[i] < arr[i - 1]) {
				int temp = arr[i];
				arr[i] = arr[i - 1];
				arr[i - 1] = temp;
				flag = 1;
			}
		}
		left++;
	}
}

int main() {
	int arr[] = { 5, 1, 9, 3, 7, 2, 8, 4, 6 };
	int n = sizeof(arr) / sizeof(arr[0]);

	std::cout << "Before sorting:\n";
	for (int i = 0; i < n; i++) {
		std::cout << arr[i] << " ";
	}
	std::cout << std::endl;

	shaker_sort(arr, n);

	std::cout << "After sorting:\n";
	for (int i = 0; i < n; i++) {
		std::cout << arr[i] << " ";
	}
	std::cout << std::endl;

	return 0;
}
